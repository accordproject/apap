@description("Accord Project Agreement Protocol")
namespace org.accordproject.protocol@1.0.0

import concerto.metamodel@0.4.0.{Property,ConceptDeclaration,Model} from https://models.accordproject.org/concerto/metamodel@0.4.0.cto
import org.accordproject.commonmark@0.5.0.Document from https://models.accordproject.org/markdown/commonmark@0.5.0.cto

scalar JSON extends String
scalar FullyQualifiedTypeName extends String

@description("Bytes and mime type for a logo")
concept Logo {
    o String base64
    o String mimeType
}

@description("The text for a template")
concept Text {
    o Document templateMark
}

@description("The concept declaration associated with a template")
concept TemplateModel {
    o ConceptDeclaration value
}

@description("A shared data model")
@resource
concept SharedModel identified by modelId {
    o String modelId
    o Model model
}

@description("The type (language) of code")
enum CodeType {
    o ES2015
    o WASM_BYTES
}

@description("Code encoding scheme")
enum CodeEncodingType {
    o PLAIN_TEXT
    o BASE64
}

@description("Executable code")
concept Code {
    o CodeType type
    o CodeEncodingType encoding
    o String value
}

@description("A function for a template")
concept Function identified by name {
    o String name
    o FullyQualifiedTypeName requestType
    o FullyQualifiedTypeName responseType optional
    o FullyQualifiedTypeName[] emittedTypes optional
    o Code code
}

@description("The functions for a template")
concept Logic {
    o FullyQualifiedTypeName stateType optional
    o Function[] functions
}

@resource
@description("An Accord Project template")
concept Template identified by name {
    o String name
    o String author
    o String displayName optional
    o String version
    o String description optional
    o String license
    o String[] keywords optional
    o Logo logo optional
    o TemplateModel templateModel
    o Text text
    o Logic logic optional
}

@resource
@description("An Accord Project Agreement, an instance of a template")
concept Agreement identified by agreementId {
    o String agreementId
    o JSON data
    --> Template template
}

@description("Abstract conversion options")
abstract concept ConversionOptions {
}

@description("PDF conversion options")
concept PdfConversionOptions extends ConversionOptions {
    o JSON styles optional
}

@description("Server feature identifiers")
enum FeatureType {
    // note: crud operations on templates is required
    o TEMPLATE_VERIFY_SIGNATURES   // verify a signed template
    o TEMPLATE_LOGIC               // templates with logic
    o TEMPLATE_STATEFUL            // stateful templates

    o AGREEMENT_MANAGE             // crud operations on agreements
    o AGREEMENT_TRIGGER            // trigger agreements
    o AGREEMENT_STATE              // get the state of an agreement
    o AGREEMENT_CONVERT_PDF        // convert agreement to PDF

    // o AGREEMENT_SIGNING

    o SHARED_MODEL_MANAGE          // manage shared models
}

@description("Server capabilities")
concept Capabilities {
    o FeatureType[] features
}

@description("Trigger a function with a JSON payload")
concept TriggerRequest {
    o String functionName
    o JSON payload
}

@description("Response of triggering a function")
concept TriggerResponse {
    o JSON result optional
    o Boolean isError
    o String errorMessage optional
    o String errorDetails optional
}

@description("Runtime status of an agreement")
enum AgreementStatusType {
    o RUNNING
    o COMPLETED
}

@description("Runtime state of an agreement")
concept StateResponse {
    o AgreementStatusType status
    o JSON result
}